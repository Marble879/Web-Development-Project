{
	"info": {
		"_postman_id": "57a724d7-db48-49a2-8e27-426a9cf97d9a",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User tests",
			"item": [
				{
					"name": "[USER] Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var userId = jsonData._id;\r",
									"pm.environment.set(\"user_id\", userId);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
									"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test(\"Body has _id\", function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "Fred",
									"type": "text"
								},
								{
									"key": "password",
									"value": "freddie",
									"type": "text"
								},
								{
									"key": "bio",
									"value": "Hi my name is Fred",
									"type": "text"
								},
								{
									"key": "event",
									"value": "icon",
									"type": "text"
								},
								{
									"key": "icon",
									"type": "file",
									"src": "./tests/test_icon.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Create second user to show in next test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var userId = jsonData._id;\r",
									"pm.environment.set(\"user_id2\", userId);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"Carl\");\r",
									"    pm.expect(jsonData.password).to.eql(\"whippedcream\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"I like long walks on the leash\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"})\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test(\"Body has _id\", function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "Carl",
									"type": "text"
								},
								{
									"key": "password",
									"value": "whippedcream",
									"type": "text"
								},
								{
									"key": "bio",
									"value": "I like long walks on the leash",
									"type": "text"
								},
								{
									"key": "event",
									"value": "icon",
									"type": "text"
								},
								{
									"key": "icon",
									"type": "file",
									"src": "./tests/test_icon.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataUserOne = pm.response.json().users[0];\r",
									"var jsonDataUserTwo = pm.response.json().users[1];\r",
									"\r",
									"var getUser_IdOne = pm.variables.get('user_id');\r",
									"var getUser_IdTwo = pm.variables.get('user_id2');\r",
									"\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('First User in body has correct id', function () {\r",
									"    pm.expect(jsonDataUserOne._id).to.eql(getUser_IdOne);\r",
									"});\r",
									"\r",
									"pm.test('Second User in body has correct id', function () {\r",
									"    pm.expect(jsonDataUserTwo._id).to.eql(getUser_IdTwo);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct user, password, bio, and event', function () {\r",
									"    pm.expect(jsonDataUserOne.username).to.eql(\"Fred\");\r",
									"    pm.expect(jsonDataUserOne.password).to.eql(\"freddie\");\r",
									"    pm.expect(jsonDataUserOne.bio).to.eql(\"Hi my name is Fred\");\r",
									"    pm.expect(jsonDataUserOne.event).to.eql(\"icon\");\r",
									"    pm.expect(jsonDataUserTwo.username).to.eql(\"Carl\");\r",
									"    pm.expect(jsonDataUserTwo.password).to.eql(\"whippedcream\");\r",
									"    pm.expect(jsonDataUserTwo.bio).to.eql(\"I like long walks on the leash\");\r",
									"    pm.expect(jsonDataUserTwo.event).to.eql(\"icon\");\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonDataUserOne.icon).to.be.a('String');\r",
									"    pm.expect(jsonDataUserTwo.icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonDataUserOne._id).to.be.a('String');\r",
									"    pm.expect(jsonDataUserTwo._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Get user with specific ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var getUser_Id = pm.variables.get(\"user_id\");\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test('Body has correct _id ', function () {\r",
									"    pm.expect(jsonData._id).to.eql(getUser_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct user, password, bio, and event', function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
									"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Put test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var getUser_Id = pm.variables.get(\"user_id\");\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test('Body has correct _id', function () {\r",
									"    pm.expect(jsonData._id).to.eql(getUser_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct user, password, bio, and event', function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"bob\");\r",
									"    pm.expect(jsonData.password).to.eql(\"123\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"bob cares about you\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"bob\",\r\n    \"password\": \"123\",\r\n    \"bio\": \"bob cares about you\",\r\n    \"event\": \"icon\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Patch test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var getUser_Id = pm.variables.get(\"user_id\");\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test('Body has correct _id', function () {\r",
									"    pm.expect(jsonData._id).to.eql(getUser_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct user, password, bio, and event', function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"bob\");\r",
									"    pm.expect(jsonData.password).to.eql(\"123\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"bob loves you <3\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bio\": \"bob loves you <3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Delete specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var getUser_Id = pm.variables.get(\"user_id\");\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test('Body has correct _id', function () {\r",
									"    pm.expect(jsonData._id).to.eql(getUser_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct user, password, bio, and event', function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"bob\");\r",
									"    pm.expect(jsonData.password).to.eql(\"123\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"bob loves you <3\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Post to show that delete all users works",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var userId = jsonData._id;\r",
									"pm.environment.set(\"user_id\", userId);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
									"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test(\"Body has _id\", function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "Fred",
									"type": "text"
								},
								{
									"key": "password",
									"value": "freddie",
									"type": "text"
								},
								{
									"key": "bio",
									"value": "Hi my name is Fred",
									"type": "text"
								},
								{
									"key": "event",
									"value": "icon",
									"type": "text"
								},
								{
									"key": "icon",
									"type": "file",
									"src": "./tests/test_icon.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Delete all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var numberOfMatchedDocuments = jsonData.n;\r",
									"var isDeleteSuccesful = jsonData.ok;\r",
									"var deletedCount = jsonData.deletedCount;\r",
									"\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Has deleted sucesfully', function() {\r",
									"    pm.expect(isDeleteSuccesful).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test('Correct number of documents deleted', function() {\r",
									"    pm.expect(numberOfMatchedDocuments).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test('Correct number of deletes have occured', function() {\r",
									"    pm.expect(deletedCount).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post tests",
			"item": [
				{
					"name": "Post error case tests",
					"item": [
						{
							"name": "Post request error cases",
							"item": [
								{
									"name": "[ERRPOST] No title in request post",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text",
													"disabled": true
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] Empty title in request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] file type title in request Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"type": "file",
													"src": "./tests/server.postman_collection.json"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "abc",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] numberOfFavorites is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "abc",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] numberOfFavorites is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] numberOfFavorites not in request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 201', function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('number of favorites has default value', function() {",
													"    pm.expect(jsonData.numberOfFavorites).to.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text",
													"disabled": true
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] userId not in request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "a",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "",
													"type": "text",
													"disabled": true
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] userId empty in request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] userId file type in request Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"type": "file",
													"src": "./tests/test_icon.jpg"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] event not in request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text",
													"disabled": true
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] event empty in request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] event file type in request Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"type": "file",
													"src": "./tests/test_image.jpg"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] Rating is of type string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												},
												{
													"key": "ratings",
													"value": "da",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] Rating is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												},
												{
													"key": "ratings",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] Rating is file type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												},
												{
													"key": "ratings",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] Image not included",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] Image is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] Image is of type string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"value": "test",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] Image is unaccepted type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 415', function () {",
													"    pm.response.to.have.status(415);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/invalid_file_format_test.txt"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] Image is unaccepted size",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 413', function () {",
													"    pm.response.to.have.status(413);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_greater_than_30_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST]  Description is not included in request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 201', function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "",
													"type": "text",
													"disabled": true
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST]  Description is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 201', function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST]  Description contains file type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"type": "file",
													"src": "./tests/test_image.jpg"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST]  Description contains array",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description[0]",
													"value": "test",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST]  Tags is of file type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "f",
													"type": "text"
												},
												{
													"key": "description",
													"value": "test",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "1",
													"type": "text"
												},
												{
													"key": "tags",
													"contentType": "",
													"type": "file",
													"src": "./tests/invalid_file_format_test.txt"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPOST] Delete all posts",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get request error cases",
							"item": [
								{
									"name": "[ERRGET] Get all Posts when none exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 404', function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRGET] Get all Posts with a tag that doesn't exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 404', function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/posts?tag=DoesNotExist",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											],
											"query": [
												{
													"key": "tag",
													"value": "DoesNotExist"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRGET] Get a Post that has an ID thats not of type ObjectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 400', function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/posts/Test_Should_not_work",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"Test_Should_not_work"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRGET] Create a post for fail case purpose",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"var postId = jsonData._id;",
													"",
													"pm.environment.set(\"post_id_error_case\", postId);",
													"",
													"pm.test('Status code is 201', function () {",
													"    pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "test_title",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "3",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRGET] Delete all posts for error case test purposes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 200', function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRGET] Search for a post with an ID that does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 404', function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete request error cases",
							"item": [
								{
									"name": "[ERRDELETE] Delete all Posts when none exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 404', function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRDELETE] Delete a Post that has an ID that is not of type ObjectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 400', function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/posts/abc",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRDELETE] Create a post for fail case purpose",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"var postId = jsonData._id;",
													"",
													"pm.environment.set(\"post_id_error_case\", postId);",
													"",
													"pm.test('Status code is 201', function () {",
													"    pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "test_title",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "3",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRDELETE] Delete all posts for error case test purposes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 200', function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRDELETE] Delete a post with an ID that does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 404', function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Patch request error cases",
							"item": [
								{
									"name": "[ERRPATCH] Patch a post with an  ID that is not of type objectID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 400', function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Changing description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/ThisShouldNotWork",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"ThisShouldNotWork"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPATCH] Create a post for fail case purpose",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"var postId = jsonData._id;",
													"",
													"pm.environment.set(\"post_id_error_case\", postId);",
													"",
													"pm.test('Status code is 201', function () {",
													"    pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "test_title",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "3",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPATCH] Patch a post title with an unexpected datatype",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": [\"test\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPATCH] Patch a post description with an unexpected datatype",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": [\"test\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPATCH] Patch a post numberOfFavorites with an unexpected datatype",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"numberOfFavorites\": \"hi\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPATCH] Patch a post tag with an unexpected datatype",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tags\": [[\"test array\"]]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPATCH] Delete all posts for error case test purposes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 200', function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPATCH] Patch a post that does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 404', function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Changing description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Put request error cases",
							"item": [
								{
									"name": "[ERRPUT] Put a post with an ID that is not of type objectID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 400', function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\" : \"test title\",\n    \"description\" : \"test description\",\n    \"numberOfFavorites\" : 2,\n    \"tags\" : \"testtag\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/ThisShouldNotWork",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"ThisShouldNotWork"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPPUT] Create a post for fail case purpose",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"var postId = jsonData._id;",
													"",
													"pm.environment.set(\"post_id_error_case\", postId);",
													"",
													"pm.test('Status code is 201', function () {",
													"    pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "title",
													"value": "test_title",
													"type": "text"
												},
												{
													"key": "description",
													"value": "eg_description",
													"type": "text"
												},
												{
													"key": "numberOfFavorites",
													"value": "3",
													"type": "text"
												},
												{
													"key": "tags",
													"value": "testtag",
													"contentType": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"type": "text"
												},
												{
													"key": "event",
													"value": "post",
													"type": "text"
												},
												{
													"key": "image",
													"type": "file",
													"src": "./tests/test_image.jpg"
												}
											]
										},
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPUT] Put a post with empty body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPUT] Put a post with no body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPUT] Put a post with a missing attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\" : \"test title\",\n    \"description\" : \"test description\",\n    \"numberOfFavorites\" : 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPUT] Put a post title with an unexpected datatype",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": [\"test\"],\n    \"description\" : \"test description\",\n    \"numberOfFavorites\" : 2,\n    \"tags\" : \"testtag\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPUT] Put a post description with an unexpected datatype",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\" : \"test title\",\n    \"description\": [\"test\"],\n    \"numberOfFavorites\" : 2,\n    \"tags\" : \"testtag\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPUT] Put a post numberOfFavorites with an unexpected datatype",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\" : \"test title\",\n    \"description\" : \"test description\",\n    \"numberOfFavorites\": \"hi\",\n    \"tags\" : \"testtag\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPUT] Put a post tag with an unexpected datatype",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 422', function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\" : \"test title\",\n    \"description\" : \"test description\",\n    \"numberOfFavorites\" : 2,\n    \"tags\": [[\"test array\"]]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPUT] Delete all posts for error case test purposes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 200', function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/posts",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ERRPUT] Put a post that does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var  jsonData = pm.response.json();",
													"",
													"pm.test('Status code is 404', function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\" : \"test title\",\n    \"description\" : \"test description\",\n    \"numberOfFavorites\" : 2,\n    \"tags\" : \"testtag\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/posts/{{post_id_error_case}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"posts",
												"{{post_id_error_case}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "[POST] Create a user for the post tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var userId = jsonData._id;\r",
									"pm.environment.set(\"user_id\", userId);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
									"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test(\"Body has _id\", function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "Fred",
									"type": "text"
								},
								{
									"key": "password",
									"value": "freddie",
									"type": "text"
								},
								{
									"key": "bio",
									"value": "Hi my name is Fred",
									"type": "text"
								},
								{
									"key": "event",
									"value": "icon",
									"type": "text"
								},
								{
									"key": "icon",
									"type": "file",
									"src": "./tests/test_image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Create second user to show in next test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var userId = jsonData._id;\r",
									"pm.environment.set(\"user_id2\", userId);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"Carl\");\r",
									"    pm.expect(jsonData.password).to.eql(\"whippedcream\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"I like long walks on the leash\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test(\"Body has _id\", function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "Carl",
									"type": "text"
								},
								{
									"key": "password",
									"value": "whippedcream",
									"type": "text"
								},
								{
									"key": "bio",
									"value": "I like long walks on the leash",
									"type": "text"
								},
								{
									"key": "event",
									"value": "icon",
									"type": "text"
								},
								{
									"key": "icon",
									"type": "file",
									"src": "./tests/test_image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Create a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"var postId = jsonData._id;",
									"var postTag = jsonData.tags;",
									"var userForeignKey = pm.environment.get('user_id');",
									"",
									"pm.environment.set(\"post_id\", postId);",
									"pm.environment.set(\"post_tag\", postTag);",
									"",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourits, tags, event and foreign key', function () {",
									"    pm.expect(jsonData.title).to.eql('test_title');",
									"    pm.expect(jsonData.description).to.eql('eg_description');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonData.tags).to.eql(['testtag']);",
									"    pm.expect(jsonData.event).to.eql('post');",
									"    pm.expect(jsonData.user_id).to.eql(userForeignKey);",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "test_title",
									"type": "text"
								},
								{
									"key": "description",
									"value": "eg_description",
									"type": "text"
								},
								{
									"key": "numberOfFavorites",
									"value": "3",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "testtag",
									"contentType": "",
									"type": "text"
								},
								{
									"key": "user_id",
									"value": "{{user_id}}",
									"type": "text"
								},
								{
									"key": "event",
									"value": "post",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "./tests/test_image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/posts",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Create second post to show in next test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"var postId = jsonData._id;",
									"var postTag = jsonData.tags;",
									"var userForeignKey = pm.environment.get('user_id2');",
									"",
									"pm.environment.set(\"post_id2\", postId);",
									"",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourits, tags, event and foreign key', function () {",
									"    pm.expect(jsonData.title).to.eql('test_titlecopy');",
									"    pm.expect(jsonData.description).to.eql('eg_descriptioncopy');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonData.tags).to.eql(['testtagcopy']);",
									"    pm.expect(jsonData.event).to.eql('post');",
									"    pm.expect(jsonData.user_id).to.eql(userForeignKey);",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "test_titlecopy",
									"type": "text"
								},
								{
									"key": "description",
									"value": "eg_descriptioncopy",
									"type": "text"
								},
								{
									"key": "numberOfFavorites",
									"value": "3",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "testtagcopy",
									"contentType": "",
									"type": "text"
								},
								{
									"key": "user_id",
									"value": "{{user_id2}}",
									"type": "text"
								},
								{
									"key": "event",
									"value": "post",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "./tests/test_image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/posts",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Get all posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataPostOne = pm.response.json().posts[0];",
									"var jsonDataPostTwo  = pm.response.json().posts[1];",
									"",
									"var getPost_IdOne = pm.variables.get('post_id');",
									"var getPost_IdTwo = pm.variables.get('post_id2');",
									"",
									"var getForeignkeyOne = pm.environment.get('user_id');",
									"var getForeignkeyTwo = pm.environment.get('user_id2');",
									"",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test('First Post in body has correct id', function () {",
									"    pm.expect(jsonDataPostOne._id).to.eql(getPost_IdOne);",
									"});",
									"",
									"pm.test('Second Post in body has correct id', function () {",
									"    pm.expect(jsonDataPostTwo._id).to.eql(getPost_IdTwo);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourites, tags, event and foreign key', function () {",
									"    pm.expect(jsonDataPostOne.title).to.eql('test_title');",
									"    pm.expect(jsonDataPostOne.description).to.eql('eg_description');",
									"    pm.expect(jsonDataPostOne.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonDataPostOne.tags).to.eql(['testtag']);",
									"    pm.expect(jsonDataPostTwo.title).to.eql('test_titlecopy');",
									"    pm.expect(jsonDataPostTwo.description).to.eql('eg_descriptioncopy');",
									"    pm.expect(jsonDataPostTwo.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonDataPostTwo.tags).to.eql(['testtagcopy']);",
									"    pm.expect(jsonDataPostOne.event).to.eql('post');",
									"    pm.expect(jsonDataPostTwo.event).to.eql('post');",
									"    pm.expect(jsonDataPostOne.user_id._id).to.eql(getForeignkeyOne);",
									"    pm.expect(jsonDataPostOne.user_id.username).to.eql('Fred');",
									"    pm.expect(jsonDataPostOne.user_id.password).to.eql('freddie');",
									"    pm.expect(jsonDataPostOne.user_id.bio).to.eql('Hi my name is Fred');",
									"    pm.expect(jsonDataPostOne.user_id.event).to.eql('icon');",
									"    pm.expect(jsonDataPostTwo.user_id._id).to.eql(getForeignkeyTwo);",
									"    pm.expect(jsonDataPostTwo.user_id.username).to.eql('Carl');",
									"    pm.expect(jsonDataPostTwo.user_id.password).to.eql('whippedcream');",
									"    pm.expect(jsonDataPostTwo.user_id.bio).to.eql('I like long walks on the leash');",
									"    pm.expect(jsonDataPostTwo.user_id.event).to.eql('icon');",
									"",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonDataPostOne.image).to.be.a('String');",
									"    pm.expect(jsonDataPostTwo.image).to.be.a('String');",
									"});",
									"",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonDataPostOne._id).to.be.a('String');",
									"    pm.expect(jsonDataPostTwo._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonDataPostOne.post_id).to.be.a('String');",
									"    pm.expect(jsonDataPostTwo.post_id).to.be.a('String');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Delete specific user to test foreign key deletion in post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var getUser_Id = pm.variables.get(\"user_id\");\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test('Body has correct _id', function () {\r",
									"    pm.expect(jsonData._id).to.eql(getUser_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct user, password, bio, and event', function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
									"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Get all posts to confirm foreign key is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataPostOne = pm.response.json().posts[0];",
									"var jsonDataPostTwo  = pm.response.json().posts[1];",
									"",
									"var getPost_IdOne = pm.variables.get('post_id');",
									"var getPost_IdTwo = pm.variables.get('post_id2');",
									"",
									"var getForeignkey = pm.environment.get('user_id2');",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test('First Post in body has correct id', function () {",
									"    pm.expect(jsonDataPostOne._id).to.eql(getPost_IdOne);",
									"});",
									"",
									"pm.test('Second Post in body has correct id', function () {",
									"    pm.expect(jsonDataPostTwo._id).to.eql(getPost_IdTwo);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourites, and tags', function () {",
									"    pm.expect(jsonDataPostOne.title).to.eql('test_title');",
									"    pm.expect(jsonDataPostOne.description).to.eql('eg_description');",
									"    pm.expect(jsonDataPostOne.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonDataPostOne.tags).to.eql(['testtag']);",
									"    pm.expect(jsonDataPostTwo.title).to.eql('test_titlecopy');",
									"    pm.expect(jsonDataPostTwo.description).to.eql('eg_descriptioncopy');",
									"    pm.expect(jsonDataPostTwo.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonDataPostTwo.tags).to.eql(['testtagcopy']);",
									"    pm.expect(jsonDataPostOne.event).to.eql('post');",
									"    pm.expect(jsonDataPostTwo.event).to.eql('post');",
									"});",
									"",
									"pm.test('Body has correct foreign keys and values from user', function() {",
									"    pm.expect(jsonDataPostOne.user_id).to.eql(null);",
									"    pm.expect(jsonDataPostTwo.user_id._id).to.eql(getForeignkey);",
									"    pm.expect(jsonDataPostTwo.user_id.username).to.eql('Carl');",
									"    pm.expect(jsonDataPostTwo.user_id.password).to.eql('whippedcream');",
									"    pm.expect(jsonDataPostTwo.user_id.bio).to.eql('I like long walks on the leash');",
									"    pm.expect(jsonDataPostTwo.user_id.event).to.eql('icon');",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonDataPostOne.image).to.be.a('String');",
									"    pm.expect(jsonDataPostTwo.image).to.be.a('String');",
									"});",
									"",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonDataPostOne._id).to.be.a('String');",
									"    pm.expect(jsonDataPostTwo._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonDataPostOne.post_id).to.be.a('String');",
									"    pm.expect(jsonDataPostTwo.post_id).to.be.a('String');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Get post with specific ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"",
									"var getPost_Id = pm.variables.get(\"post_id\");",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has correct _id ', function () {",
									"    pm.expect(jsonData._id).to.eql(getPost_Id);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourites, tags, event and foreign key', function () {",
									"    pm.expect(jsonData.title).to.eql('test_title');",
									"    pm.expect(jsonData.description).to.eql('eg_description');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonData.tags).to.eql(['testtag']);",
									"    pm.expect(jsonData.event).to.eql('post');",
									"    pm.expect(jsonData.user_id).to.eql(null);",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/posts/{{post_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Get post with specific tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json().posts[0];",
									"",
									"var getPostTag = pm.variables.get('post_tag');",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test('Body has correct tag', function () {",
									"    pm.expect(jsonData.tags).to.eql(getPostTag);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourites, tags, events and foreign key', function () {",
									"    pm.expect(jsonData.title).to.eql('test_title');",
									"    pm.expect(jsonData.description).to.eql('eg_description');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonData.tags).to.eql(['testtag']);",
									"    pm.expect(jsonData.event).to.eql('post');",
									"    pm.expect(jsonData.user_id).to.eql(null);",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/posts?tag={{post_tag}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							],
							"query": [
								{
									"key": "tag",
									"value": "{{post_tag}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Put test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"",
									"var getPost_Id = pm.variables.get(\"post_id\");",
									"var getForeignKey = pm.variables.get('user_id2');",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has correct _id', function () {",
									"    pm.expect(jsonData._id).to.eql(getPost_Id);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourites, tags, event and foreign key', function () {",
									"    pm.expect(jsonData.title).to.eql('new title test');",
									"    pm.expect(jsonData.description).to.eql('new description test');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(10);",
									"    pm.expect(jsonData.tags).to.eql(['new tag 1', 'new tag 2']);",
									"    pm.expect(jsonData.event).to.eql('post');",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"new title test\",\n    \"description\": \"new description test\",\n    \"numberOfFavorites\": 10,\n    \"event\": \"post\",\n    \"tags\": [\n        \"new tag 1\",\n        \"new tag 2\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/{{post_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Patch test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"",
									"var getPost_Id = pm.variables.get(\"post_id\");",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has correct _id', function () {",
									"    pm.expect(jsonData._id).to.eql(getPost_Id);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourites, and tags', function () {",
									"    pm.expect(jsonData.title).to.eql('new title test');",
									"    pm.expect(jsonData.description).to.eql('This is a new patch description');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(10);",
									"    pm.expect(jsonData.tags).to.eql(['new tag 1', 'new tag 2']);",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"This is a new patch description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/{{post_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Delete specific post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"",
									"var getPost_Id = pm.variables.get(\"post_id\");",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has correct _id', function () {",
									"    pm.expect(jsonData._id).to.eql(getPost_Id);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourites, and tags', function () {",
									"    pm.expect(jsonData.title).to.eql('new title test');",
									"    pm.expect(jsonData.description).to.eql('This is a new patch description');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(10);",
									"    pm.expect(jsonData.tags).to.eql(['new tag 1', 'new tag 2']);",
									"    pm.expect(jsonData.event).to.eql('post');",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/posts/{{post_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Post to show that delete all posts works",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"var postId = jsonData._id;",
									"var postTag = jsonData.tags;",
									"",
									"pm.environment.set(\"post_id\", postId);",
									"pm.environment.set(\"post_tag\", postTag);",
									"",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourits, and tags', function () {",
									"    pm.expect(jsonData.title).to.eql('test_title2');",
									"    pm.expect(jsonData.description).to.eql('eg_description2');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(1);",
									"    pm.expect(jsonData.tags).to.eql(['testtag']);",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "test_title2",
									"type": "text"
								},
								{
									"key": "numberOfFavorites",
									"value": "1",
									"type": "text"
								},
								{
									"key": "description",
									"value": "eg_description2",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "testtag",
									"contentType": "",
									"type": "text"
								},
								{
									"key": "user_id",
									"value": "{{user_id2}}",
									"type": "text"
								},
								{
									"key": "event",
									"value": "post",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "./tests/test_image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/posts",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Second post to show that delete all posts works Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"var postId = jsonData._id;",
									"var postTag = jsonData.tags;",
									"",
									"pm.environment.set(\"post_id\", postId);",
									"pm.environment.set(\"post_tag\", postTag);",
									"",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourits, and tags', function () {",
									"    pm.expect(jsonData.title).to.eql('test_title3');",
									"    pm.expect(jsonData.description).to.eql('eg_description3');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonData.tags).to.eql(['testtag', 'testtag3']);",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "test_title3",
									"type": "text"
								},
								{
									"key": "description",
									"value": "eg_description3",
									"type": "text"
								},
								{
									"key": "numberOfFavorites",
									"value": "3",
									"type": "text"
								},
								{
									"key": "tags[0]",
									"value": "testtag",
									"contentType": "",
									"type": "text"
								},
								{
									"key": "tags[1]",
									"value": "testtag3",
									"type": "text"
								},
								{
									"key": "user_id",
									"value": "{{user_id2}}",
									"type": "text"
								},
								{
									"key": "event",
									"value": "post",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "./tests/test_image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/posts",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Delete all posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"",
									"var numberOfMatchedDocuments = jsonData.n;",
									"var isDeleteSuccesful = jsonData.ok;",
									"var deletedCount = jsonData.deletedCount;",
									"",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Has deleted sucesfully', function() {",
									"    pm.expect(isDeleteSuccesful).to.eql(1);",
									"});",
									"",
									"pm.test('Correct number of documents deleted', function() {",
									"    pm.expect(numberOfMatchedDocuments).to.eql(3);",
									"});",
									"",
									"pm.test('Correct number of deletes have occured', function() {",
									"    pm.expect(deletedCount).to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/posts/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Delete all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var numberOfMatchedDocuments = jsonData.n;\r",
									"var isDeleteSuccesful = jsonData.ok;\r",
									"var deletedCount = jsonData.deletedCount;\r",
									"\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Has deleted sucesfully', function() {\r",
									"    pm.expect(isDeleteSuccesful).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test('Correct number of documents deleted', function() {\r",
									"    pm.expect(numberOfMatchedDocuments).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test('Correct number of deletes have occured', function() {\r",
									"    pm.expect(deletedCount).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Collection tests",
			"item": [
				{
					"name": "Post request error cases",
					"item": [
						{
							"name": "[ERRPOST] Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"var userId = jsonData._id;\r",
											"pm.environment.set(\"user_id\", userId);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
											"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
											"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
											"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
											"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
											"});\r",
											"\r",
											"pm.test('Body has an icon url', function () {\r",
											"    pm.expect(jsonData.icon).to.be.a('String');\r",
											"});\r",
											"\r",
											"pm.test(\"Body has _id\", function () {\r",
											"    pm.expect(jsonData._id).to.be.a('String');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "Fred",
											"type": "text"
										},
										{
											"key": "password",
											"value": "freddie",
											"type": "text"
										},
										{
											"key": "bio",
											"value": "Hi my name is Fred",
											"type": "text"
										},
										{
											"key": "event",
											"value": "icon",
											"type": "text"
										},
										{
											"key": "icon",
											"type": "file",
											"src": "./tests/test_icon.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] No title in request post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Landscape Pictures",
											"type": "text",
											"disabled": true
										},
										{
											"key": "post_id",
											"value": "{{post_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] Title empty in request post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "",
											"type": "text"
										},
										{
											"key": "post_id",
											"value": "{{post_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] Title is file type in request post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"type": "file",
											"src": "./tests/server.postman_collection.json"
										},
										{
											"key": "post_id",
											"value": "{{post_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] Delete all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"var numberOfMatchedDocuments = jsonData.n;\r",
											"var isDeleteSuccesful = jsonData.ok;\r",
											"var deletedCount = jsonData.deletedCount;\r",
											"\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Has deleted sucesfully', function() {\r",
											"    pm.expect(isDeleteSuccesful).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('Correct number of documents deleted', function() {\r",
											"    pm.expect(numberOfMatchedDocuments).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('Correct number of deletes have occured', function() {\r",
											"    pm.expect(deletedCount).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] Invalid user ID in request post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Landscape Pictures",
											"type": "text"
										},
										{
											"key": "post_id",
											"value": "{{post_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users/fake_id/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"fake_id",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] No user ID match in request post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Landscape Pictures",
											"type": "text",
											"disabled": true
										},
										{
											"key": "post_id",
											"value": "{{post_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"var userId = jsonData._id;\r",
											"pm.environment.set(\"user_id\", userId);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
											"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
											"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
											"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
											"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
											"});\r",
											"\r",
											"pm.test('Body has an icon url', function () {\r",
											"    pm.expect(jsonData.icon).to.be.a('String');\r",
											"});\r",
											"\r",
											"pm.test(\"Body has _id\", function () {\r",
											"    pm.expect(jsonData._id).to.be.a('String');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "Fred",
											"type": "text"
										},
										{
											"key": "password",
											"value": "freddie",
											"type": "text"
										},
										{
											"key": "bio",
											"value": "Hi my name is Fred",
											"type": "text"
										},
										{
											"key": "event",
											"value": "icon",
											"type": "text"
										},
										{
											"key": "icon",
											"type": "file",
											"src": "./tests/test_icon.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] Create a post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();",
											"var postId = jsonData._id;",
											"var postTag = jsonData.tags;",
											"var userForeignKey = pm.environment.get('user_id');",
											"",
											"pm.environment.set(\"post_id\", postId);",
											"pm.environment.set(\"post_tag\", postTag);",
											"",
											"pm.test('Status code is 201', function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Body has correct title, description, number of favourits, tags, event and foreign key', function () {",
											"    pm.expect(jsonData.title).to.eql('test_title');",
											"    pm.expect(jsonData.description).to.eql('eg_description');",
											"    pm.expect(jsonData.numberOfFavorites).to.eql(3);",
											"    pm.expect(jsonData.tags).to.eql(['testtag']);",
											"    pm.expect(jsonData.event).to.eql('post');",
											"    pm.expect(jsonData.user_id).to.eql(userForeignKey);",
											"});",
											"",
											"pm.test('Body has an image url', function () {",
											"    pm.expect(jsonData.image).to.be.a('String');",
											"});",
											"",
											"pm.test('Body has _id', function () {",
											"    pm.expect(jsonData._id).to.be.a('String');",
											"});",
											"",
											"pm.test('Body has a post_id', function() {",
											"    pm.expect(jsonData.post_id).to.be.a('String');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "test_title",
											"type": "text"
										},
										{
											"key": "description",
											"value": "eg_description",
											"type": "text"
										},
										{
											"key": "numberOfFavorites",
											"value": "3",
											"type": "text"
										},
										{
											"key": "tags",
											"value": "testtag",
											"contentType": "",
											"type": "text"
										},
										{
											"key": "user_id",
											"value": "{{user_id}}",
											"type": "text"
										},
										{
											"key": "event",
											"value": "post",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "./tests/test_image.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/posts",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] Event is of file type in request post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Landscape Pictures",
											"type": "text"
										},
										{
											"key": "post_id",
											"value": "{{post_id}}",
											"type": "text"
										},
										{
											"key": "event",
											"type": "file",
											"src": "./tests/server.postman_collection.json"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] Thumbnail is of file type in request post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Landscape Pictures",
											"type": "text"
										},
										{
											"key": "post_id",
											"value": "{{post_id}}",
											"type": "text"
										},
										{
											"key": "event",
											"value": "icon",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": "./tests/server.postman_collection.json"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] Post_id is empty in request post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Landscape Pictures",
											"type": "text"
										},
										{
											"key": "post_id",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] Post_id is of file type in request post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Landscape Pictures",
											"type": "text"
										},
										{
											"key": "post_id",
											"type": "file",
											"src": "./tests/server.postman_collection.json"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] Delete all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"var numberOfMatchedDocuments = jsonData.n;\r",
											"var isDeleteSuccesful = jsonData.ok;\r",
											"var deletedCount = jsonData.deletedCount;\r",
											"\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Has deleted sucesfully', function() {\r",
											"    pm.expect(isDeleteSuccesful).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('Correct number of documents deleted', function() {\r",
											"    pm.expect(numberOfMatchedDocuments).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('Correct number of deletes have occured', function() {\r",
											"    pm.expect(deletedCount).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPOST] Delete all posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();",
											"",
											"var numberOfMatchedDocuments = jsonData.n;",
											"var isDeleteSuccesful = jsonData.ok;",
											"var deletedCount = jsonData.deletedCount;",
											"",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Has deleted sucesfully', function() {",
											"    pm.expect(isDeleteSuccesful).to.eql(1);",
											"});",
											"",
											"pm.test('Correct number of documents deleted', function() {",
											"    pm.expect(numberOfMatchedDocuments).to.eql(1);",
											"});",
											"",
											"pm.test('Correct number of deletes have occured', function() {",
											"    pm.expect(deletedCount).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/posts/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"posts",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get request error cases",
					"item": [
						{
							"name": "[ERRGET] Get all collections when user id is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{host}}/api/users/fake_id/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"fake_id",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRGET] Get all collections when no user match with passed id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRGET] Get all user specific collections when user id is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users/fake_id/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"fake_id",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRGET] Get all user specific collections when no user match with passed id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRGET] Get user2 specific collection when no user match with passed id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users/{{user_id2}}/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id2}}",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRGET] Create a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"var userId = jsonData._id;\r",
											"pm.environment.set(\"user_id\", userId);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
											"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
											"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
											"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
											"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
											"});\r",
											"\r",
											"pm.test('Body has an icon url', function () {\r",
											"    pm.expect(jsonData.icon).to.be.a('String');\r",
											"});\r",
											"\r",
											"pm.test(\"Body has _id\", function () {\r",
											"    pm.expect(jsonData._id).to.be.a('String');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "Fred",
											"type": "text"
										},
										{
											"key": "password",
											"value": "freddie",
											"type": "text"
										},
										{
											"key": "bio",
											"value": "Hi my name is Fred",
											"type": "text"
										},
										{
											"key": "event",
											"value": "icon",
											"type": "text"
										},
										{
											"key": "icon",
											"type": "file",
											"src": "./tests/test_icon.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRGET] Get all collections when there are no collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRGET] Delete all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"var numberOfMatchedDocuments = jsonData.n;\r",
											"var isDeleteSuccesful = jsonData.ok;\r",
											"var deletedCount = jsonData.deletedCount;\r",
											"\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Has deleted sucesfully', function() {\r",
											"    pm.expect(isDeleteSuccesful).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('Correct number of documents deleted', function() {\r",
											"    pm.expect(numberOfMatchedDocuments).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('Correct number of deletes have occured', function() {\r",
											"    pm.expect(deletedCount).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete request error cases",
					"item": [
						{
							"name": "[ERRDELETE] Delete all collections when none exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();",
											"",
											"pm.test('Status code is 404', function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRDELETE] Delete specific collection when id is not type ObjectID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/collections/fake_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"fake_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRDELETE] Create a user for fail case purpose",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"var userId = jsonData._id;\r",
											"pm.environment.set(\"user_id\", userId);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
											"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
											"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
											"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
											"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
											"});\r",
											"\r",
											"pm.test('Body has an icon url', function () {\r",
											"    pm.expect(jsonData.icon).to.be.a('String');\r",
											"});\r",
											"\r",
											"pm.test(\"Body has _id\", function () {\r",
											"    pm.expect(jsonData._id).to.be.a('String');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "Fred",
											"type": "text"
										},
										{
											"key": "password",
											"value": "freddie",
											"type": "text"
										},
										{
											"key": "bio",
											"value": "Hi my name is Fred",
											"type": "text"
										},
										{
											"key": "event",
											"value": "icon",
											"type": "text"
										},
										{
											"key": "icon",
											"type": "file",
											"src": "./tests/test_icon.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRDELETE] Create a collection for fail case purpose",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"var collectionId = jsonData._id;\r",
											"pm.environment.set(\"collection_id\", collectionId);\r",
											"\r",
											"var postForeignkey = pm.environment.get('post_id');\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body has title and post_id\", function () {\r",
											"    pm.expect(jsonData.title).to.eql(\"Landscape Pictures\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body has _id\", function () {\r",
											"    pm.expect(jsonData._id).to.be.a('String');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Landscape Pictures",
											"type": "text"
										},
										{
											"key": "post_id",
											"value": "{{post_id}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRDELETE] Delete all collections for error case test purposes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRDELETE] Delete specific collection when id does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRDELETE] Delete all users for error case test purposes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"var numberOfMatchedDocuments = jsonData.n;\r",
											"var isDeleteSuccesful = jsonData.ok;\r",
											"var deletedCount = jsonData.deletedCount;\r",
											"\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Has deleted sucesfully', function() {\r",
											"    pm.expect(isDeleteSuccesful).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('Correct number of documents deleted', function() {\r",
											"    pm.expect(numberOfMatchedDocuments).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('Correct number of deletes have occured', function() {\r",
											"    pm.expect(deletedCount).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patch request error cases",
					"item": [
						{
							"name": "[ERRPATCH] Patch a collection with a ID that is not of type ObjectID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Cosplay\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/collections/fake_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"fake_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPATCH] Create a user for fail case purpose",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"var userId = jsonData._id;\r",
											"pm.environment.set(\"user_id\", userId);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
											"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
											"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
											"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
											"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
											"});\r",
											"\r",
											"pm.test('Body has an icon url', function () {\r",
											"    pm.expect(jsonData.icon).to.be.a('String');\r",
											"});\r",
											"\r",
											"pm.test(\"Body has _id\", function () {\r",
											"    pm.expect(jsonData._id).to.be.a('String');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "Fred",
											"type": "text"
										},
										{
											"key": "password",
											"value": "freddie",
											"type": "text"
										},
										{
											"key": "bio",
											"value": "Hi my name is Fred",
											"type": "text"
										},
										{
											"key": "event",
											"value": "icon",
											"type": "text"
										},
										{
											"key": "icon",
											"type": "file",
											"src": "./tests/test_icon.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPATCH] Create a collection for fail case purpose",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"var collectionId = jsonData._id;\r",
											"pm.environment.set(\"collection_id\", collectionId);\r",
											"\r",
											"var postForeignkey = pm.environment.get('post_id');\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body has title and post_id\", function () {\r",
											"    pm.expect(jsonData.title).to.eql(\"Landscape Pictures\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body has _id\", function () {\r",
											"    pm.expect(jsonData._id).to.be.a('String');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Landscape Pictures",
											"type": "text"
										},
										{
											"key": "post_id",
											"value": "{{post_id}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPATCH] Patch a collection title with an unexpected datatype",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": [\"Cosplay\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPATCH] Delete all users for error case test purposes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"var numberOfMatchedDocuments = jsonData.n;\r",
											"var isDeleteSuccesful = jsonData.ok;\r",
											"var deletedCount = jsonData.deletedCount;\r",
											"\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Has deleted sucesfully', function() {\r",
											"    pm.expect(isDeleteSuccesful).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('Correct number of documents deleted', function() {\r",
											"    pm.expect(numberOfMatchedDocuments).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('Correct number of deletes have occured', function() {\r",
											"    pm.expect(deletedCount).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPATCH] Delete all collections for error case test purposes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPATCH] Patch a collection title with collection id being unmatched",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Put request error cases",
					"item": [
						{
							"name": "[ERRPUT] Put a collection where the id is not of ObjectID type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Cat Photos",
											"type": "text"
										},
										{
											"key": "event",
											"value": "thumbnail",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": "./tests/test_thumnail.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/collections/fake_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"fake_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Create a user for fail case purpose",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"var userId = jsonData._id;\r",
											"pm.environment.set(\"user_id\", userId);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
											"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
											"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
											"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
											"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
											"});\r",
											"\r",
											"pm.test('Body has an icon url', function () {\r",
											"    pm.expect(jsonData.icon).to.be.a('String');\r",
											"});\r",
											"\r",
											"pm.test(\"Body has _id\", function () {\r",
											"    pm.expect(jsonData._id).to.be.a('String');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "Fred",
											"type": "text"
										},
										{
											"key": "password",
											"value": "freddie",
											"type": "text"
										},
										{
											"key": "bio",
											"value": "Hi my name is Fred",
											"type": "text"
										},
										{
											"key": "event",
											"value": "icon",
											"type": "text"
										},
										{
											"key": "icon",
											"type": "file",
											"src": "./tests/test_icon.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Create a collection for fail case purpose",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"var collectionId = jsonData._id;\r",
											"pm.environment.set(\"collection_id\", collectionId);\r",
											"\r",
											"var postForeignkey = pm.environment.get('post_id');\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body has title and post_id\", function () {\r",
											"    pm.expect(jsonData.title).to.eql(\"Landscape Pictures\");\r",
											"    pm.expect(jsonData.post_id).to.eql([postForeignkey]);\r",
											"});\r",
											"\r",
											"pm.test(\"Body has _id\", function () {\r",
											"    pm.expect(jsonData._id).to.be.a('String');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Landscape Pictures",
											"type": "text"
										},
										{
											"key": "post_id",
											"value": "{{post_id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/users/{{user_id}}/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Put a collection but an attribute is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Cat Photos",
											"type": "text",
											"disabled": true
										},
										{
											"key": "event",
											"value": "thumbnail",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": "./tests/test_thumnail.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Put a collection but title has an file type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"type": "file",
											"src": "./tests/server.postman_collection.json"
										},
										{
											"key": "event",
											"value": "thumbnail",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": "./tests/test_thumnail.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Put a collection but event has an file type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Cat Photos",
											"type": "text"
										},
										{
											"key": "event",
											"type": "file",
											"src": []
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": "./tests/test_thumnail.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Put a collection but thumbnail was not included",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Cat Photos",
											"type": "text"
										},
										{
											"key": "event",
											"value": "thumbnail",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": "./tests/test_thumnail.jpg",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Put a collection but thumbnail was empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Cat Photos",
											"type": "text"
										},
										{
											"key": "event",
											"value": "thumbnail",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Put a collection but thumbnail is a string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 422', function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Cat Photos",
											"type": "text"
										},
										{
											"key": "event",
											"value": "thumbnail",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"value": "test",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Put a collection but thumbnail is a invalid file format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 415', function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Cat Photos",
											"type": "text"
										},
										{
											"key": "event",
											"value": "thumbnail",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": "./tests/invalid_file_format_test.txt"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Put a collection but thumbnail is unacceptable size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 413', function () {\r",
											"    pm.response.to.have.status(413);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Cat Photos",
											"type": "text"
										},
										{
											"key": "event",
											"value": "thumbnail",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": "./tests/test_greater_than_30_image.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Delete all users for error case test purposes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"var numberOfMatchedDocuments = jsonData.n;\r",
											"var isDeleteSuccesful = jsonData.ok;\r",
											"var deletedCount = jsonData.deletedCount;\r",
											"\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Has deleted sucesfully', function() {\r",
											"    pm.expect(isDeleteSuccesful).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('Correct number of documents deleted', function() {\r",
											"    pm.expect(numberOfMatchedDocuments).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test('Correct number of deletes have occured', function() {\r",
											"    pm.expect(deletedCount).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Delete all collections for error case test purposes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/collections",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ERRPUT] Put a collection where the id does not match",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var  jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Cat Photos",
											"type": "text"
										},
										{
											"key": "event",
											"value": "thumbnail",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": "./tests/test_thumnail.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/api/collections/{{collection_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"collections",
										"{{collection_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[USER] Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var userId = jsonData._id;\r",
									"pm.environment.set(\"user_id\", userId);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
									"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test(\"Body has _id\", function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "Fred",
									"type": "text"
								},
								{
									"key": "password",
									"value": "freddie",
									"type": "text"
								},
								{
									"key": "bio",
									"value": "Hi my name is Fred",
									"type": "text"
								},
								{
									"key": "event",
									"value": "icon",
									"type": "text"
								},
								{
									"key": "icon",
									"type": "file",
									"src": "./tests/test_icon.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Create second user to show in next test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var userId = jsonData._id;\r",
									"pm.environment.set(\"user_id2\", userId);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"Carl\");\r",
									"    pm.expect(jsonData.password).to.eql(\"whippedcream\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"I like long walks on the leash\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"})\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test(\"Body has _id\", function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "Carl",
									"type": "text"
								},
								{
									"key": "password",
									"value": "whippedcream",
									"type": "text"
								},
								{
									"key": "bio",
									"value": "I like long walks on the leash",
									"type": "text"
								},
								{
									"key": "event",
									"value": "icon",
									"type": "text"
								},
								{
									"key": "icon",
									"type": "file",
									"src": "./tests/test_icon.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Create a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"var postId = jsonData._id;",
									"var postTag = jsonData.tags;",
									"var userForeignKey = pm.environment.get('user_id');",
									"",
									"pm.environment.set(\"post_id\", postId);",
									"pm.environment.set(\"post_tag\", postTag);",
									"",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourits, tags, event and foreign key', function () {",
									"    pm.expect(jsonData.title).to.eql('test_title');",
									"    pm.expect(jsonData.description).to.eql('eg_description');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonData.tags).to.eql(['testtag']);",
									"    pm.expect(jsonData.event).to.eql('post');",
									"    pm.expect(jsonData.user_id).to.eql(userForeignKey);",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "test_title",
									"type": "text"
								},
								{
									"key": "description",
									"value": "eg_description",
									"type": "text"
								},
								{
									"key": "numberOfFavorites",
									"value": "3",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "testtag",
									"contentType": "",
									"type": "text"
								},
								{
									"key": "user_id",
									"value": "{{user_id}}",
									"type": "text"
								},
								{
									"key": "event",
									"value": "post",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "./tests/test_image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/posts",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Create second post to show in next test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"var postId = jsonData._id;",
									"var postTag = jsonData.tags;",
									"var userForeignKey = pm.environment.get('user_id2');",
									"",
									"pm.environment.set(\"post_id2\", postId);",
									"",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourits, tags, event and foreign key', function () {",
									"    pm.expect(jsonData.title).to.eql('test_titlecopy');",
									"    pm.expect(jsonData.description).to.eql('eg_descriptioncopy');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonData.tags).to.eql(['testtagcopy']);",
									"    pm.expect(jsonData.event).to.eql('post');",
									"    pm.expect(jsonData.user_id).to.eql(userForeignKey);",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "test_titlecopy",
									"type": "text"
								},
								{
									"key": "description",
									"value": "eg_descriptioncopy",
									"type": "text"
								},
								{
									"key": "numberOfFavorites",
									"value": "3",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "testtagcopy",
									"contentType": "",
									"type": "text"
								},
								{
									"key": "user_id",
									"value": "{{user_id2}}",
									"type": "text"
								},
								{
									"key": "event",
									"value": "post",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "./tests/test_image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/posts",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Create a collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var collectionId = jsonData._id;\r",
									"pm.environment.set(\"collection_id\", collectionId);\r",
									"\r",
									"var postForeignkey = pm.environment.get('post_id');\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has title and post_id\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(\"Landscape Pictures\");\r",
									"    pm.expect(jsonData.post_id).to.eql([postForeignkey]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has _id\", function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Landscape Pictures",
									"type": "text"
								},
								{
									"key": "post_id",
									"value": "{{post_id}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/collections",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"collections"
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Create second user to show in next test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var collectionId = jsonData._id;\r",
									"pm.environment.set(\"collection_id2\", collectionId);\r",
									"\r",
									"var postForeignkey = pm.environment.get('post_id2');\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has title and post_id\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(\"Dog Pictures\");\r",
									"    pm.expect(jsonData.post_id).to.eql([postForeignkey]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has _id\", function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Dog Pictures",
									"type": "text"
								},
								{
									"key": "post_id",
									"value": "{{post_id2}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id2}}/collections",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id2}}",
								"collections"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Get all users to show that user collections are set",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var jsonDataCollectionOne = pm.response.json().users[0].collections[0];\r",
									"var jsonDataCollectionTwo  = pm.response.json().users[1].collections[0];\r",
									"\r",
									"var getUserIdOne = pm.environment.get('user_id');\r",
									"var getUserIdTwo = pm.environment.get('user_id2');\r",
									"var getPostIdOne = pm.environment.get('post_id');\r",
									"var getPostIdTwo = pm.environment.get('post_id2');\r",
									"var getCollectionIdOne = pm.environment.get('collection_id');\r",
									"var getCollectionIdTwo = pm.environment.get('collection_id2');\r",
									"\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('First user in body has correct id', function () {\r",
									"    pm.expect(jsonData.users[0]._id).to.eql(getUserIdOne);\r",
									"});\r",
									"\r",
									"pm.test('Second user in body has correct id', function () {\r",
									"    pm.expect(jsonData.users[1]._id).to.eql(getUserIdTwo);\r",
									"});\r",
									"\r",
									"pm.test('First collection in body has correct id', function () {\r",
									"    pm.expect(jsonDataCollectionOne._id).to.eql(getCollectionIdOne);\r",
									"});\r",
									"\r",
									"pm.test('Second collection in body has correct id', function () {\r",
									"    pm.expect(jsonDataCollectionTwo._id).to.eql(getCollectionIdTwo);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct post_id, title, and user information', function () {\r",
									"    pm.expect(jsonDataCollectionOne.post_id).to.eql([getPostIdOne]);\r",
									"    pm.expect(jsonDataCollectionOne.title).to.eql('Landscape Pictures');\r",
									"    pm.expect(jsonData.users[0].username).to.eql('Fred');\r",
									"    pm.expect(jsonData.users[0].password).to.eql('freddie');\r",
									"    pm.expect(jsonData.users[0].bio).to.eql('Hi my name is Fred');\r",
									"    pm.expect(jsonData.users[0].event).to.eql('icon');\r",
									"    pm.expect(jsonDataCollectionTwo.post_id).to.eql([getPostIdTwo]);\r",
									"    pm.expect(jsonDataCollectionTwo.title).to.eql('Dog Pictures');\r",
									"    pm.expect(jsonData.users[1].username).to.eql('Carl');\r",
									"    pm.expect(jsonData.users[1].password).to.eql('whippedcream');\r",
									"    pm.expect(jsonData.users[1].bio).to.eql('I like long walks on the leash');\r",
									"    pm.expect(jsonData.users[1].event).to.eql('icon');\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.users[0].icon).to.be.a('String');\r",
									"    pm.expect(jsonData.users[1].icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonData.users[0]._id).to.be.a('String');\r",
									"    pm.expect(jsonData.users[1]._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Add collection to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var getUser_Id = pm.variables.get(\"user_id\");\r",
									"var getCollection_Id = pm.variables.get(\"collection_id\");\r",
									"var getCollection_IdTwo = pm.variables.get(\"collection_id2\");\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test('Body has correct _id', function () {\r",
									"    pm.expect(jsonData._id).to.eql(getUser_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct collections, username, password, bio and event', function () {\r",
									"    pm.expect(jsonData.collections).to.eql([getCollection_Id, getCollection_IdTwo]);\r",
									"    pm.expect(jsonData.username).to.eql('Fred');\r",
									"    pm.expect(jsonData.password).to.eql('freddie');\r",
									"    pm.expect(jsonData.bio).to.eql('Hi my name is Fred');\r",
									"    pm.expect(jsonData.event).to.eql('icon');\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"collections\": \"{{collection_id2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Get all user collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var jsonDataCollectionOne = pm.response.json().collections[0];\r",
									"var jsonDataCollectionTwo = pm.response.json().collections[1];\r",
									"\r",
									"var getCollection_IdOne = pm.variables.get('collection_id');\r",
									"var getCollection_IdTwo = pm.variables.get('collection_id2');\r",
									"\r",
									"var getUser_Id = pm.environment.get('user_id');\r",
									"\r",
									"var getPost_id = pm.environment.get('post_id');\r",
									"var getPost_idTwo = pm.environment.get('post_id2');\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('First Collection in body has correct id', function () {\r",
									"    pm.expect(jsonDataCollectionOne._id).to.eql(getCollection_IdOne);\r",
									"});\r",
									"\r",
									"pm.test('Second Collection in body has correct id', function () {\r",
									"    pm.expect(jsonDataCollectionTwo._id).to.eql(getCollection_IdTwo);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct collections and user information', function () {\r",
									"    pm.expect(jsonDataCollectionOne.title).to.eql('Landscape Pictures');\r",
									"    pm.expect(jsonDataCollectionOne.post_id).to.eql([getPost_id]);\r",
									"    pm.expect(jsonDataCollectionTwo.title).to.eql('Dog Pictures');\r",
									"    pm.expect(jsonDataCollectionTwo.post_id).to.eql([getPost_idTwo]);\r",
									"    pm.expect(jsonData._id).to.eql(getUser_Id);\r",
									"    pm.expect(jsonData.username).to.eql('Fred');\r",
									"    pm.expect(jsonData.password).to.eql('freddie');\r",
									"    pm.expect(jsonData.bio).to.eql('Hi my name is Fred');\r",
									"    pm.expect(jsonData.event).to.eql('icon');\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonDataCollectionOne._id).to.be.a('String');\r",
									"    pm.expect(jsonDataCollectionTwo._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/collections",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"collections"
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Get all user2 collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var jsonDataCollectionTwo = pm.response.json().collections[0];\r",
									"\r",
									"var getCollection_IdTwo = pm.variables.get('collection_id2');\r",
									"\r",
									"var getUser_IdTwo = pm.environment.get('user_id2');\r",
									"\r",
									"var getPost_id = pm.environment.get('post_id');\r",
									"var getPost_idTwo = pm.environment.get('post_id2');\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Second Collection in body has correct id', function () {\r",
									"    pm.expect(jsonDataCollectionTwo._id).to.eql(getCollection_IdTwo);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct collections and user information', function () {\r",
									"    pm.expect(jsonDataCollectionTwo.title).to.eql('Dog Pictures');\r",
									"    pm.expect(jsonDataCollectionTwo.post_id).to.eql([getPost_idTwo]);\r",
									"    pm.expect(jsonData._id).to.eql(getUser_IdTwo);\r",
									"    pm.expect(jsonData.username).to.eql('Carl');\r",
									"    pm.expect(jsonData.password).to.eql('whippedcream');\r",
									"    pm.expect(jsonData.bio).to.eql('I like long walks on the leash');\r",
									"    pm.expect(jsonData.event).to.eql('icon');\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonDataCollectionTwo._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id2}}/collections",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id2}}",
								"collections"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Delete specific post to test foreign key deletion in collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"",
									"var getPost_Id = pm.variables.get(\"post_id\");",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has correct _id', function () {",
									"    pm.expect(jsonData._id).to.eql(getPost_Id);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourites, and tags', function () {",
									"    pm.expect(jsonData.title).to.eql('test_title');",
									"    pm.expect(jsonData.description).to.eql('eg_description');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonData.tags).to.eql(['testtag']);",
									"    pm.expect(jsonData.event).to.eql('post');",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/posts/{{post_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Get all collections to confirm foreign key is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var jsonDataCollectionOne = pm.response.json().collections[0];\r",
									"var jsonDataCollectionTwo = pm.response.json().collections[1];\r",
									"\r",
									"var getCollection_IdOne = pm.variables.get('collection_id');\r",
									"var getCollection_IdTwo = pm.variables.get('collection_id2');\r",
									"\r",
									"var getUser_Id = pm.environment.get('user_id');\r",
									"var getPost_idTwo = pm.environment.get('post_id2');\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('First Collection in body has correct id', function () {\r",
									"    pm.expect(jsonDataCollectionOne._id).to.eql(getCollection_IdOne);\r",
									"});\r",
									"\r",
									"pm.test('Second Collection in body has correct id', function () {\r",
									"    pm.expect(jsonDataCollectionTwo._id).to.eql(getCollection_IdTwo);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct collections and user information', function () {\r",
									"    pm.expect(jsonDataCollectionOne.title).to.eql('Landscape Pictures');\r",
									"    pm.expect(jsonDataCollectionOne.post_id).to.eql([]);\r",
									"    pm.expect(jsonDataCollectionTwo.title).to.eql('Dog Pictures');\r",
									"    pm.expect(jsonDataCollectionTwo.post_id).to.eql([getPost_idTwo]);\r",
									"    pm.expect(jsonData._id).to.eql(getUser_Id);\r",
									"    pm.expect(jsonData.username).to.eql('Fred');\r",
									"    pm.expect(jsonData.password).to.eql('freddie');\r",
									"    pm.expect(jsonData.bio).to.eql('Hi my name is Fred');\r",
									"    pm.expect(jsonData.event).to.eql('icon');\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonDataCollectionOne._id).to.be.a('String');\r",
									"    pm.expect(jsonDataCollectionTwo._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/collections",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"collections"
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Get user1 collection with specific id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var jsonDataCollectionOne = pm.response.json().collections[0];\r",
									"\r",
									"var getCollection_Id = pm.variables.get(\"collection_id\");\r",
									"var getUser_Id = pm.variables.get(\"user_id\");\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test('Body has correct user_id', function () {\r",
									"    pm.expect(jsonData._id).to.eql(getUser_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct collection_id ', function () {\r",
									"    pm.expect(jsonDataCollectionOne._id).to.eql(getCollection_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct title and post_id', function () {\r",
									"    pm.expect(jsonDataCollectionOne.post_id).to.eql([]);\r",
									"    pm.expect(jsonDataCollectionOne.title).to.eql('Landscape Pictures');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/collections/{{collection_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"collections",
								"{{collection_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Get user2 collection with specific id2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var jsonDataCollectionOne = pm.response.json().collections[0];\r",
									"\r",
									"var getCollection_Id = pm.variables.get(\"collection_id2\");\r",
									"var getUser_Id = pm.variables.get(\"user_id2\");\r",
									"var getPost_Id = pm.variables.get(\"post_id2\");\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test('Body has correct user_id', function () {\r",
									"    pm.expect(jsonData._id).to.eql(getUser_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct collection_id ', function () {\r",
									"    pm.expect(jsonDataCollectionOne._id).to.eql(getCollection_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct title and post_id', function () {\r",
									"    pm.expect(jsonDataCollectionOne.post_id).to.eql([getPost_Id]);\r",
									"    pm.expect(jsonDataCollectionOne.title).to.eql('Dog Pictures');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id2}}/collections/{{collection_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id2}}",
								"collections",
								"{{collection_id2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Put test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var getCollection_Id = pm.variables.get(\"collection_id\");\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test('Body has correct _id', function () {\r",
									"    pm.expect(jsonData._id).to.eql(getCollection_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct title and post_id', function () {\r",
									"    pm.expect(jsonData.title).to.eql('Cat Photos');\r",
									"    pm.expect(jsonData.event).to.eql('thumbnail')\r",
									"    pm.expect(jsonData.post_id).to.eql([]);\r",
									"});\r",
									"\r",
									"pm.test('Body has an thumbnail url', function () {\r",
									"    pm.expect(jsonData.thumbnail).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Cat Photos",
									"type": "text"
								},
								{
									"key": "event",
									"value": "thumbnail",
									"type": "text"
								},
								{
									"key": "thumbnail",
									"type": "file",
									"src": "./tests/test_thumnail.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/collections/{{collection_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"collections",
								"{{collection_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Patch test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var getCollection_Id = pm.variables.get(\"collection_id2\");\r",
									"\r",
									"var getForeignkey = pm.environment.get('post_id');\r",
									"var getForeignkeyTwo = pm.environment.get('post_id2');\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test('Body has correct _id', function () {\r",
									"    pm.expect(jsonData._id).to.eql(getCollection_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct title and post_id', function () {\r",
									"    pm.expect(jsonData.title).to.eql('Cosplay');\r",
									"    pm.expect(jsonData.post_id).to.eql([getForeignkeyTwo, getForeignkey]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Cosplay\",\r\n    \"post_id\": \"{{post_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/collections/{{collection_id2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"collections",
								"{{collection_id2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Delete specific collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var getCollection_Id = pm.variables.get(\"collection_id\");\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Body has _id', function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test('Body has correct _id', function () {\r",
									"    pm.expect(jsonData._id).to.eql(getCollection_Id);\r",
									"});\r",
									"\r",
									"pm.test('Body has correct title and event', function () {\r",
									"    pm.expect(jsonData.title).to.eql('Cat Photos');\r",
									"    pm.expect(jsonData.event).to.eql('thumbnail');\r",
									"});\r",
									"\r",
									"pm.test('Body has an thumbanil url', function () {\r",
									"    pm.expect(jsonData.thumbnail).to.be.a('String');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/collections/{{collection_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"collections",
								"{{collection_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Post to show that delete all collections works",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var collectionId = jsonData._id;\r",
									"pm.environment.set(\"collection_id\", collectionId);\r",
									"\r",
									"var postForeignkey = pm.environment.get('post_id2');\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has title and post_id\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(\"Landscape Pictures\");\r",
									"    pm.expect(jsonData.post_id).to.eql([postForeignkey]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has _id\", function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Landscape Pictures",
									"type": "text"
								},
								{
									"key": "post_id",
									"value": "{{post_id2}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/collections",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"collections"
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Delete all collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var numberOfMatchedDocuments = jsonData.n;\r",
									"var isDeleteSuccesful = jsonData.ok;\r",
									"var deletedCount = jsonData.deletedCount;\r",
									"\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Has deleted sucesfully', function() {\r",
									"    pm.expect(isDeleteSuccesful).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test('Correct number of documents deleted', function() {\r",
									"    pm.expect(numberOfMatchedDocuments).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test('Correct number of deletes have occured', function() {\r",
									"    pm.expect(deletedCount).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/collections",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"collections"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Delete all posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"",
									"var numberOfMatchedDocuments = jsonData.n;",
									"var isDeleteSuccesful = jsonData.ok;",
									"var deletedCount = jsonData.deletedCount;",
									"",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Has deleted sucesfully', function() {",
									"    pm.expect(isDeleteSuccesful).to.eql(1);",
									"});",
									"",
									"pm.test('Correct number of documents deleted', function() {",
									"    pm.expect(numberOfMatchedDocuments).to.eql(1);",
									"});",
									"",
									"pm.test('Correct number of deletes have occured', function() {",
									"    pm.expect(deletedCount).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/posts/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Delete all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var numberOfMatchedDocuments = jsonData.n;\r",
									"var isDeleteSuccesful = jsonData.ok;\r",
									"var deletedCount = jsonData.deletedCount;\r",
									"\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Has deleted sucesfully', function() {\r",
									"    pm.expect(isDeleteSuccesful).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test('Correct number of documents deleted', function() {\r",
									"    pm.expect(numberOfMatchedDocuments).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test('Correct number of deletes have occured', function() {\r",
									"    pm.expect(deletedCount).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rating tests",
			"item": [
				{
					"name": "[USER] Create a user for the rating tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var userId = jsonData._id;\r",
									"pm.environment.set(\"user_id\", userId);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has correct username, password, bio and event\", function () {\r",
									"    pm.expect(jsonData.username).to.eql(\"Fred\");\r",
									"    pm.expect(jsonData.password).to.eql(\"freddie\");\r",
									"    pm.expect(jsonData.bio).to.eql(\"Hi my name is Fred\");\r",
									"    pm.expect(jsonData.event).to.eql(\"icon\");\r",
									"});\r",
									"\r",
									"pm.test('Body has an icon url', function () {\r",
									"    pm.expect(jsonData.icon).to.be.a('String');\r",
									"});\r",
									"\r",
									"pm.test(\"Body has _id\", function () {\r",
									"    pm.expect(jsonData._id).to.be.a('String');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "Fred",
									"type": "text"
								},
								{
									"key": "password",
									"value": "freddie",
									"type": "text"
								},
								{
									"key": "bio",
									"value": "Hi my name is Fred",
									"type": "text"
								},
								{
									"key": "event",
									"value": "icon",
									"type": "text"
								},
								{
									"key": "icon",
									"type": "file",
									"src": "./tests/test_icon.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Create a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"var postId = jsonData._id;",
									"var postTag = jsonData.tags;",
									"var userForeignKey = pm.environment.get('user_id');",
									"",
									"pm.environment.set(\"post_id\", postId);",
									"pm.environment.set(\"post_tag\", postTag);",
									"",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourits, tags, event and foreign key', function () {",
									"    pm.expect(jsonData.title).to.eql('test_title');",
									"    pm.expect(jsonData.description).to.eql('eg_description');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonData.tags).to.eql(['testtag']);",
									"    pm.expect(jsonData.event).to.eql('post');",
									"    pm.expect(jsonData.user_id).to.eql(userForeignKey);",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "test_title",
									"type": "text"
								},
								{
									"key": "description",
									"value": "eg_description",
									"type": "text"
								},
								{
									"key": "numberOfFavorites",
									"value": "3",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "testtag",
									"contentType": "",
									"type": "text"
								},
								{
									"key": "user_id",
									"value": "{{user_id}}",
									"type": "text"
								},
								{
									"key": "event",
									"value": "post",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "./tests/test_image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/posts",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[RATING] Create a rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"var ratingId = jsonData._id;",
									"",
									"var getUser_Id = pm.environment.get('user_id');",
									"var getPost_Id = pm.environment.get('post_id');",
									"pm.environment.set(\"rating_id\", ratingId);",
									"",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Body has star rating, user, and post', function () {",
									"    pm.expect(jsonData.starRating).to.eql(5);",
									"    pm.expect(jsonData.user).to.eql(getUser_Id);",
									"    pm.expect(jsonData.post).to.eql(getPost_Id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starRating\": 5,\r\n    \"user\": \"{{user_id}}\",\r\n    \"post\": \"{{post_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/{{post_id}}/ratings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{post_id}}",
								"ratings"
							]
						}
					},
					"response": []
				},
				{
					"name": "[RATING] Get all ratings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataRatingOne = pm.response.json().ratings[0];\r",
									"\r",
									"var getRating_IdOne = pm.environment.get('rating_id');\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('First Rating in body has correct id', function () {\r",
									"    pm.expect(jsonDataRatingOne._id).to.eql(getRating_IdOne);\r",
									"});\r",
									"\r",
									"pm.test('First Rating in body has correct start rating', function () {\r",
									"    pm.expect(jsonDataRatingOne.starRating).to.eql(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/ratings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ratings"
							]
						}
					},
					"response": []
				},
				{
					"name": "[RATING] Patch rating score",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"var getRating_Id = pm.environment.get(\"rating_id\");",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has correct _id', function () {",
									"    pm.expect(jsonData._id).to.eql(getRating_Id);",
									"});",
									"",
									"pm.test('Star rating changed', function () {",
									"    pm.expect(jsonData.starRating).to.eql(4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starRating\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/ratings/{{rating_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ratings",
								"{{rating_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[RATING] Delete specific rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"",
									"var getPost_Id = pm.environment.get(\"post_id\");",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/posts/{{post_id}}/ratings/{{rating_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{post_id}}",
								"ratings",
								"{{rating_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[RATING] Validate that ratings are deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/ratings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ratings"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Validate that rating was deleted from post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"",
									"var getPost_Id = pm.variables.get(\"post_id\");",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has correct _id ', function () {",
									"    pm.expect(jsonData._id).to.eql(getPost_Id);",
									"});",
									"",
									"pm.test('Rating was removed', function () {",
									"    pm.expect(jsonData.ratings).to.eql([]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/posts/{{post_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[RATING] Create another rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"var ratingId = jsonData._id;",
									"",
									"var getUser_Id = pm.environment.get('user_id');",
									"var getPost_Id = pm.environment.get('post_id');",
									"pm.environment.set(\"rating_id\", ratingId);",
									"",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Body has star rating, user, and post', function () {",
									"    pm.expect(jsonData.starRating).to.eql(5);",
									"    pm.expect(jsonData.user).to.eql(getUser_Id);",
									"    pm.expect(jsonData.post).to.eql(getPost_Id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"starRating\": 5,\r\n    \"user\": \"{{user_id}}\",\r\n    \"post\": \"{{post_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/posts/{{post_id}}/ratings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{post_id}}",
								"ratings"
							]
						}
					},
					"response": []
				},
				{
					"name": "[RATING] Validate that rating exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonDataRatingOne = pm.response.json().ratings[0];\r",
									"\r",
									"var getRating_IdOne = pm.environment.get('rating_id');\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('First Rating in body has correct id', function () {\r",
									"    pm.expect(jsonDataRatingOne._id).to.eql(getRating_IdOne);\r",
									"});\r",
									"\r",
									"pm.test('First Rating in body has correct start rating', function () {\r",
									"    pm.expect(jsonDataRatingOne.starRating).to.eql(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/ratings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ratings"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Validate rating deletion by removing post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();",
									"",
									"var getPost_Id = pm.variables.get(\"post_id\");",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Body has _id', function () {",
									"    pm.expect(jsonData._id).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has correct _id', function () {",
									"    pm.expect(jsonData._id).to.eql(getPost_Id);",
									"});",
									"",
									"pm.test('Body has correct title, description, number of favourites, and tags', function () {",
									"    pm.expect(jsonData.title).to.eql('test_title');",
									"    pm.expect(jsonData.description).to.eql('eg_description');",
									"    pm.expect(jsonData.numberOfFavorites).to.eql(3);",
									"    pm.expect(jsonData.tags).to.eql(['testtag']);",
									"    pm.expect(jsonData.event).to.eql('post');",
									"});",
									"",
									"pm.test('Body has an image url', function () {",
									"    pm.expect(jsonData.image).to.be.a('String');",
									"});",
									"",
									"pm.test('Body has a post_id', function() {",
									"    pm.expect(jsonData.post_id).to.be.a('String');",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/posts/{{post_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[RATING] Validate that rating is deleted after post's deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test('Status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Has message property', function () {\r",
									"      pm.expect(jsonData.ratings).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/ratings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ratings"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER] Delete all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"var numberOfMatchedDocuments = jsonData.n;\r",
									"var isDeleteSuccesful = jsonData.ok;\r",
									"var deletedCount = jsonData.deletedCount;\r",
									"\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Has deleted sucesfully', function() {\r",
									"    pm.expect(isDeleteSuccesful).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test('Correct number of documents deleted', function() {\r",
									"    pm.expect(numberOfMatchedDocuments).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test('Correct number of deletes have occured', function() {\r",
									"    pm.expect(deletedCount).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Auth tests",
			"item": [
				{
					"name": "[USER AUTH] Register a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 404', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "test",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test",
									"type": "text"
								},
								{
									"key": "bio",
									"value": "testbio",
									"type": "text"
								},
								{
									"key": "event",
									"value": "icon",
									"type": "text"
								},
								{
									"key": "icon",
									"type": "file",
									"src": "./tests/test_icon.jpg"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/usersAuth/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"usersAuth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER AUTH] User Login (token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var  jsonData = pm.response.json();\r",
									"var token = jsonData.token;\r",
									"pm.environment.set(\"token\", token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"test\",\r\n    \"password\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/usersAuth/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"usersAuth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[USER AUTH] Get user data",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer REPLACE HERE WITH USER TOKEN",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/users/data",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"data"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete all database entries",
			"item": [
				{
					"name": "[USER] Delete all users Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Delete all posts Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/posts/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[COLLECTION] Delete all collections Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{user_id}}/collections",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"collections"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}